{"version":3,"file":"static/js/937.0a8db4b5.chunk.js","mappings":"4QAEaA,EAAaC,EAAAA,GAAAA,KAAH,6CAIVC,EAAcD,EAAAA,GAAAA,MAAH,yC,kBCwExB,EAxEe,WAAO,IAAD,EACnB,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAO,IAAIC,gBAsBjB,OA1Bc,oCAwBdC,CAAWL,GAEJ,WACLG,EAAKG,OACN,CAzBA,CAHa,wCAKd,WAA0BC,GAA1B,gFACEC,EAAAA,EAAAA,SAAAA,QAAyB,4CACT,mCACVC,EAAS,CACbC,QAFc,mCAGdH,MAAAA,GALJ,kBAQ2BC,EAAAA,EAAAA,IAAU,GAAI,CAAEC,OAAAA,EAAQE,OAAQR,EAAKQ,SARhE,OAQUC,EARV,OASIlB,EACEkB,EAASC,KAAKC,QAAQC,KAAI,SAAAC,GACxB,MAAO,CAAEC,GAAID,EAAMC,GAAIC,eAAgBF,EAAME,eAC9C,KAZP,kDAeIC,QAAQC,IAAI,KAAMC,SAftB,2DALc,sBA6Bf,GAAE,CAACrB,IAcJ,OACE,iCACE,UAACX,EAAD,CAAYiC,SATK,SAAAC,GACnBA,EAAEC,iBACF,IAPwBjB,EAOlBkB,EAAOF,EAAEG,cAPSnB,EAQNkB,EAAKE,SAAS3B,YAAY4B,MAN5C7B,EAD6B,KAAVQ,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAQ/CkB,EAAKI,OACN,EAIG,WACE,SAACtC,EAAD,CAAauC,KAAK,OAAOC,KAAK,iBAC9B,mBAAQD,KAAK,SAAb,uBAEDrC,EAASuC,OAAS,IACjB,wBACGvC,EAASsB,KAAI,SAAAC,GACZ,OACE,yBACE,SAAC,KAAD,CAAMiB,GAAE,kBAAajB,EAAMC,IAAMiB,MAAO,CAAEC,KAAMxC,GAAhD,SACGqB,EAAME,kBAFFF,EAAMC,GAMlB,QAKV,C","sources":["components/Movies/Movies.style.js","components/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesForm = styled.form`\n  margin-top: 15px;\n`;\n\nexport const MoviesInput = styled.input`\n  width: 250px;\n`;\n","import { useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { MoviesForm, MoviesInput } from './Movies.style';\nimport axios from 'axios';\nimport { useState } from 'react';\n\nconst Movies = () => {\n  const [searched, setSearched] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    const ctrl = new AbortController();\n    async function fetchQuery(query) {\n      axios.defaults.baseURL = 'https://api.themoviedb.org/3/search/movie';\n      const API_KEY = '8e9be2f5936cb349aea9f629442792e4';\n      const params = {\n        api_key: API_KEY,\n        query,\n      };\n      try {\n        const response = await axios.get('', { params, signal: ctrl.signal });\n        setSearched(\n          response.data.results.map(movie => {\n            return { id: movie.id, original_title: movie.original_title };\n          })\n        );\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n\n    fetchQuery(searchQuery);\n\n    return () => {\n      ctrl.abort();\n    };\n  }, [searchQuery]);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    updateQueryString(form.elements.searchQuery.value);\n    form.reset();\n  };\n\n  return (\n    <>\n      <MoviesForm onSubmit={handleSubmit}>\n        <MoviesInput type=\"text\" name=\"searchQuery\" />\n        <button type=\"submit\">Search</button>\n      </MoviesForm>\n      {searched.length > 0 && (\n        <ul>\n          {searched.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.original_title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["MoviesForm","styled","MoviesInput","useState","searched","setSearched","location","useLocation","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","ctrl","AbortController","fetchQuery","abort","query","axios","params","api_key","signal","response","data","results","map","movie","id","original_title","console","log","message","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","type","name","length","to","state","from"],"sourceRoot":""}